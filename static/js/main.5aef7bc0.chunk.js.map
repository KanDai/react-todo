{"version":3,"sources":["components/Task/styles.module.scss","components/Task/index.tsx","components/TaskList/index.tsx","components/InputForm/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Task","props","useState","isEditable","changeEditable","className","styles","wrap","form","onSubmit","e","preventDefault","task","target","elements","value","onSubmitEdit","index","type","name","formInput","defaultValue","label","formBtn","checkbox","checked","isChecked","onChange","toggleChecked","btns","btn","onClick","clickDelete","TaskList","text","list","length","map","id","InputForm","onFormSubmit","App","setId","tasks","setTasks","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5aef7bc0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"styles_wrap__2q_t6\",\"checkbox\":\"styles_checkbox__26n7X\",\"btns\":\"styles_btns__3Epl8\",\"btn\":\"styles_btn__qZtsS\",\"form\":\"styles_form__35qBq\",\"formBtn\":\"styles_formBtn__2DHjE\",\"formInput\":\"styles_formInput__1S4WU\"};","import { useState } from 'react'\nimport { TaskType } from 'types'\nimport styles from './styles.module.scss'\n\nconst Task = (props: TaskType) => {\n    const [isEditable, changeEditable] = useState<boolean>(false)\n\n    const changeStatus = (e: any): void => {\n        if (!props.toggleChecked) return\n        props.toggleChecked(props.index, e.target.checked)\n    }\n\n    const handleSubmitEdit = (e: any): void => {\n        e.preventDefault()\n        const { task } = e.target.elements\n\n        if (!task.value || !props.onSubmitEdit) return\n\n        props.onSubmitEdit(props.index, task.value)\n        changeEditable(false)\n    }\n\n    const handleClickDelete = (): void => {\n        if (!props.clickDelete) return\n        props.clickDelete(props.index)\n    }\n\n    if (!isEditable) {\n        return (\n            <div className={styles.wrap}>\n                <div>\n                    <input\n                        className={styles.checkbox}\n                        type=\"checkbox\"\n                        checked={props.isChecked}\n                        onChange={changeStatus}\n                    />\n                    <span>{props.label}</span>\n                </div>\n                <div className={styles.btns}>\n                    <button\n                        type=\"button\"\n                        className={styles.btn}\n                        onClick={() => changeEditable(true)}\n                    >\n                        編集\n                    </button>\n                    <button\n                        type=\"button\"\n                        className={styles.btn}\n                        onClick={handleClickDelete}\n                    >\n                        削除\n                    </button>\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className={styles.wrap}>\n                <form className={styles.form} onSubmit={handleSubmitEdit}>\n                    <input\n                        type=\"text\"\n                        name=\"task\"\n                        className={styles.formInput}\n                        defaultValue={props.label}\n                    />\n                    <button className={styles.formBtn} type=\"submit\">\n                        決定\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Task\n","import Task from 'components/Task'\nimport { TaskType, TaskListType } from 'types'\n\nconst TaskList = (props: TaskListType) => {\n    const toggleChecked = (index: number, checked: boolean): void => {\n        props.toggleChecked(index, checked)\n    }\n\n    const onSubmitEdit = (index: number, text: string): void => {\n        props.onSubmitEdit(index, text)\n    }\n\n    const clickDelete = (index: number): void => {\n        props.clickDelete(index)\n    }\n\n    if (props.list.length === 0) {\n        return <p>タスクはありません</p>\n    }\n\n    return (\n        <div className=\"TaskList\">\n            {props.list.map((task: TaskType, index: number) => {\n                return (\n                    <div key={task.id} className=\"column is-3\">\n                        <Task\n                            id={task.id}\n                            index={index}\n                            label={task.label}\n                            isChecked={task.isChecked}\n                            toggleChecked={toggleChecked}\n                            onSubmitEdit={onSubmitEdit}\n                            clickDelete={clickDelete}\n                        />\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default TaskList\n","interface InputFormType {\n    onFormSubmit: Function\n}\n\nconst InputForm = (props: InputFormType) => {\n    const handleSubmit = (e: any): void => {\n        e.preventDefault()\n        const { task } = e.target.elements\n\n        if (!task.value) return\n\n        props.onFormSubmit(task.value)\n        task.value = ''\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" name=\"task\" />\n            <button type=\"submit\">作成</button>\n        </form>\n    )\n}\n\nexport default InputForm\n","import { useState } from 'react'\nimport TaskList from 'components/TaskList'\nimport InputForm from 'components/InputForm'\n\ninterface TaskType {\n    id: number\n    label: string\n    isChecked: boolean\n}\n\nfunction App() {\n    const [id, setId] = useState<number>(0)\n    const [tasks, setTasks] = useState<TaskType[]>([])\n\n    const crateTask = (label: string): void => {\n        setId(id + 1)\n\n        const task: TaskType = {\n            id: id,\n            label: label,\n            isChecked: false,\n        }\n\n        setTasks([...tasks, task])\n    }\n\n    const editTask = (index: number, text: string): void => {\n        tasks[index].label = text\n\n        setTasks([...tasks])\n    }\n\n    const deleteTask = (index: number): void => {\n        tasks.splice(index, 1)\n\n        setTasks([...tasks])\n    }\n\n    const toggleChecked = (index: number, checked: boolean): void => {\n        tasks[index].isChecked = checked\n\n        setTasks([...tasks])\n    }\n\n    return (\n        <div className=\"App\">\n            <InputForm onFormSubmit={crateTask} />\n            <TaskList\n                list={tasks}\n                toggleChecked={toggleChecked}\n                onSubmitEdit={editTask}\n                clickDelete={deleteTask}\n            />\n        </div>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'App'\nimport reportWebVitals from './reportWebVitals'\nimport './index.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}