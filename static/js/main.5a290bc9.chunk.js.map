{"version":3,"sources":["components/Task/styles.module.scss","components/Task/index.tsx","components/TaskList/index.tsx","components/InputForm/index.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/InputForm/styles.module.scss","components/TaskList/styles.module.scss"],"names":["module","exports","Task","props","useState","isEditable","changeEditable","className","styles","edit","form","onSubmit","e","preventDefault","task","target","elements","value","onSubmitEdit","index","type","name","formInput","defaultValue","label","formBtn","wrap","inner","checkbox","checked","isChecked","onChange","toggleChecked","btns","btn","onClick","clickDelete","TaskList","text","list","length","nodata","map","id","deleteArea","deleteCompleteTask","InputForm","onFormSubmit","input","button","App","savedId","localStorage","getItem","Number","tempSavedTasks","savedTasks","JSON","parse","setId","tasks","setTasks","saveTasks","setItem","stringify","margedTasks","newId","String","splice","filterdTasks","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,KAAO,qBAAqB,MAAQ,sBAAsB,KAAO,qBAAqB,SAAW,yBAAyB,KAAO,qBAAqB,IAAM,oBAAoB,KAAO,qBAAqB,QAAU,wBAAwB,UAAY,4B,sIC2E7PC,EAxEF,SAACC,GAAqB,IAAD,EACOC,oBAAkB,GADzB,mBACvBC,EADuB,KACXC,EADW,KAuB9B,OAAKD,EAgCG,qBAAKE,UAAWC,IAAOC,KAAvB,SACI,uBAAMF,UAAWC,IAAOE,KAAMC,SAhDjB,SAACC,GACtBA,EAAEC,iBADqC,IAE/BC,EAASF,EAAEG,OAAOC,SAAlBF,KAEHA,EAAKG,OAAUd,EAAMe,eAE1Bf,EAAMe,aAAaf,EAAMgB,MAAOL,EAAKG,OACrCX,GAAe,KAyCP,UACI,uBACIc,KAAK,OACLC,KAAK,OACLd,UAAWC,IAAOc,UAClBC,aAAcpB,EAAMqB,QAExB,wBAAQjB,UAAWC,IAAOiB,QAASL,KAAK,SAAxC,+BAtCR,sBAAKb,UAAWC,IAAOkB,KAAvB,UACI,sBAAKnB,UAAWC,IAAOmB,MAAvB,UACI,uBACIpB,UAAWC,IAAOoB,SAClBR,KAAK,WACLS,QAAS1B,EAAM2B,UACfC,SA5BC,SAACnB,GACbT,EAAM6B,eACX7B,EAAM6B,cAAc7B,EAAMgB,MAAOP,EAAEG,OAAOc,YA4B9B,+BAAO1B,EAAMqB,WAEjB,sBAAKjB,UAAWC,IAAOyB,KAAvB,UACI,wBACIb,KAAK,SACLb,UAAWC,IAAO0B,IAClBC,QAAS,kBAAM7B,GAAe,IAHlC,0BAOA,wBACIc,KAAK,SACLb,UAAWC,IAAO0B,IAClBC,QA5BM,WACjBhC,EAAMiC,aACXjC,EAAMiC,YAAYjC,EAAMgB,QAuBZ,iC,gBCQLkB,EAnDE,SAAClC,GACd,IAAM6B,EAAgB,SAACb,EAAeU,GAClC1B,EAAM6B,cAAcb,EAAOU,IAGzBX,EAAe,SAACC,EAAemB,GACjCnC,EAAMe,aAAaC,EAAOmB,IAGxBF,EAAc,SAACjB,GACjBhB,EAAMiC,YAAYjB,IAOtB,OAA0B,IAAtBhB,EAAMoC,KAAKC,OAEP,qBAAKjC,UAAWC,IAAOiC,OAAvB,SACI,yFAMR,sBAAKlC,UAAWC,IAAO+B,KAAvB,UACKpC,EAAMoC,KAAKG,KAAI,SAAC5B,EAAgBK,GAC7B,OACI,8BACI,cAAC,EAAD,CACIwB,GAAI7B,EAAK6B,GACTxB,MAAOA,EACPK,MAAOV,EAAKU,MACZM,UAAWhB,EAAKgB,UAChBE,cAAeA,EACfd,aAAcA,EACdkB,YAAaA,KARXtB,EAAK6B,OAavB,qBAAKpC,UAAWC,IAAOoC,WAAvB,SACI,wBAAQxB,KAAK,SAASe,QA9BP,WACvBhC,EAAM0C,sBA6BE,sF,gBCnBDC,EAvBG,SAAC3C,GAWf,OACI,qBAAKI,UAAWC,IAAOkB,KAAvB,SACI,uBAAMnB,UAAWC,IAAOE,KAAMC,SAZjB,SAACC,GAClBA,EAAEC,iBADiC,IAE3BC,EAASF,EAAEG,OAAOC,SAAlBF,KAEHA,EAAKG,QAEVd,EAAM4C,aAAajC,EAAKG,OACxBH,EAAKG,MAAQ,KAKT,UACI,uBAAOV,UAAWC,IAAOwC,MAAO5B,KAAK,OAAOC,KAAK,SACjD,wBAAQd,UAAWC,IAAOyC,OAAQ7B,KAAK,SAAvC,gCCyDD8B,MAnEf,WACI,IAAMC,EAAUC,aAAaC,QAAQ,kBAC/BC,OAAOF,aAAaC,QAAQ,mBAC5B,EACAE,EAAiBH,aAAaC,QAAQ,qBACtCG,EAAaD,EAAiBE,KAAKC,MAAMH,GAAkB,GALtD,EAMSnD,mBAAiB+C,GAN1B,mBAMJR,EANI,KAMAgB,EANA,OAOevD,mBAAqBoD,GAPpC,mBAOJI,EAPI,KAOGC,EAPH,KASLC,EAAY,SAACF,GACfC,EAAS,YAAID,IACbR,aAAaW,QAAQ,oBAAqBN,KAAKO,UAAUJ,KA0C7D,OACI,sBAAKrD,UAAU,MAAf,UACI,cAAC,EAAD,CAAWwC,aAzCD,SAACvB,GACf,IAAMV,EAAiB,CACnB6B,GAAIA,EACJnB,MAAOA,EACPM,WAAW,GAGTmC,EAAW,sBAAOL,GAAP,CAAc9C,IAC/BgD,EAAUG,GAEV,IAAMC,EAAQvB,EAAK,EACnBgB,EAAMO,GACNd,aAAaW,QAAQ,iBAAkBI,OAAOD,OA8B1C,cAAC,EAAD,CACI3B,KAAMqB,EACN5B,cAXU,SAACb,EAAeU,GAClC+B,EAAMzC,GAAOW,UAAYD,EAEzBiC,EAAUF,IASF1C,aA9BK,SAACC,EAAemB,GAC7BsB,EAAMzC,GAAOK,MAAQc,EAErBwB,EAAUF,IA4BFxB,YAzBO,SAACjB,GAChByC,EAAMQ,OAAOjD,EAAO,GAEpB2C,EAAUF,IAuBFf,mBApBe,WACvB,IAAMwB,EAAeT,EAAMU,QAAO,SAACxD,GAAD,OAAWA,EAAKgB,aAElDgC,EAAUO,UCxCHE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCHdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,K,kBCfAvE,EAAOC,QAAU,CAAC,KAAO,qBAAqB,KAAO,qBAAqB,MAAQ,sBAAsB,OAAS,yB,kBCAjHD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,OAAS,uBAAuB,WAAa,8B","file":"static/js/main.5a290bc9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"styles_wrap__2q_t6\",\"inner\":\"styles_inner__17EtR\",\"edit\":\"styles_edit__VU4G4\",\"checkbox\":\"styles_checkbox__26n7X\",\"btns\":\"styles_btns__3Epl8\",\"btn\":\"styles_btn__qZtsS\",\"form\":\"styles_form__35qBq\",\"formBtn\":\"styles_formBtn__2DHjE\",\"formInput\":\"styles_formInput__1S4WU\"};","import { useState } from 'react'\nimport { TaskType } from 'types'\nimport styles from './styles.module.scss'\n\nconst Task = (props: TaskType) => {\n    const [isEditable, changeEditable] = useState<boolean>(false)\n\n    const changeStatus = (e: any): void => {\n        if (!props.toggleChecked) return\n        props.toggleChecked(props.index, e.target.checked)\n    }\n\n    const handleSubmitEdit = (e: any): void => {\n        e.preventDefault()\n        const { task } = e.target.elements\n\n        if (!task.value || !props.onSubmitEdit) return\n\n        props.onSubmitEdit(props.index, task.value)\n        changeEditable(false)\n    }\n\n    const handleClickDelete = (): void => {\n        if (!props.clickDelete) return\n        props.clickDelete(props.index)\n    }\n\n    if (!isEditable) {\n        return (\n            <div className={styles.wrap}>\n                <div className={styles.inner}>\n                    <input\n                        className={styles.checkbox}\n                        type=\"checkbox\"\n                        checked={props.isChecked}\n                        onChange={changeStatus}\n                    />\n                    <span>{props.label}</span>\n                </div>\n                <div className={styles.btns}>\n                    <button\n                        type=\"button\"\n                        className={styles.btn}\n                        onClick={() => changeEditable(true)}\n                    >\n                        編集\n                    </button>\n                    <button\n                        type=\"button\"\n                        className={styles.btn}\n                        onClick={handleClickDelete}\n                    >\n                        削除\n                    </button>\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className={styles.edit}>\n                <form className={styles.form} onSubmit={handleSubmitEdit}>\n                    <input\n                        type=\"text\"\n                        name=\"task\"\n                        className={styles.formInput}\n                        defaultValue={props.label}\n                    />\n                    <button className={styles.formBtn} type=\"submit\">\n                        決定\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Task\n","import Task from 'components/Task'\nimport { TaskType, TaskListType } from 'types'\nimport styles from './styles.module.scss'\n\nconst TaskList = (props: TaskListType) => {\n    const toggleChecked = (index: number, checked: boolean): void => {\n        props.toggleChecked(index, checked)\n    }\n\n    const onSubmitEdit = (index: number, text: string): void => {\n        props.onSubmitEdit(index, text)\n    }\n\n    const clickDelete = (index: number): void => {\n        props.clickDelete(index)\n    }\n\n    const deleteCompleteTask = (): void => {\n        props.deleteCompleteTask()\n    }\n\n    if (props.list.length === 0) {\n        return (\n            <div className={styles.nodata}>\n                <p>タスクはありません</p>\n            </div>\n        )\n    }\n\n    return (\n        <div className={styles.list}>\n            {props.list.map((task: TaskType, index: number) => {\n                return (\n                    <div key={task.id}>\n                        <Task\n                            id={task.id}\n                            index={index}\n                            label={task.label}\n                            isChecked={task.isChecked}\n                            toggleChecked={toggleChecked}\n                            onSubmitEdit={onSubmitEdit}\n                            clickDelete={clickDelete}\n                        />\n                    </div>\n                )\n            })}\n            <div className={styles.deleteArea}>\n                <button type=\"button\" onClick={deleteCompleteTask}>\n                    処理済みのタスクを削除\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default TaskList\n","import styles from './styles.module.scss'\ninterface InputFormType {\n    onFormSubmit: Function\n}\n\nconst InputForm = (props: InputFormType) => {\n    const handleSubmit = (e: any): void => {\n        e.preventDefault()\n        const { task } = e.target.elements\n\n        if (!task.value) return\n\n        props.onFormSubmit(task.value)\n        task.value = ''\n    }\n\n    return (\n        <div className={styles.wrap}>\n            <form className={styles.form} onSubmit={handleSubmit}>\n                <input className={styles.input} type=\"text\" name=\"task\" />\n                <button className={styles.button} type=\"submit\">\n                    作成\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default InputForm\n","import { useState } from 'react'\nimport TaskList from 'components/TaskList'\nimport InputForm from 'components/InputForm'\n\ninterface TaskType {\n    id: number\n    label: string\n    isChecked: boolean\n}\n\nfunction App() {\n    const savedId = localStorage.getItem('reactTodoAppId')\n        ? Number(localStorage.getItem('reactTodoAppId'))\n        : 0\n    const tempSavedTasks = localStorage.getItem('reactTodoAppTasks')\n    const savedTasks = tempSavedTasks ? JSON.parse(tempSavedTasks) : []\n    const [id, setId] = useState<number>(savedId)\n    const [tasks, setTasks] = useState<TaskType[]>(savedTasks)\n\n    const saveTasks = (tasks: TaskType[]): void => {\n        setTasks([...tasks])\n        localStorage.setItem('reactTodoAppTasks', JSON.stringify(tasks))\n    }\n\n    const crateTask = (label: string): void => {\n        const task: TaskType = {\n            id: id,\n            label: label,\n            isChecked: false,\n        }\n\n        const margedTasks = [...tasks, task]\n        saveTasks(margedTasks)\n\n        const newId = id + 1\n        setId(newId)\n        localStorage.setItem('reactTodoAppId', String(newId))\n    }\n\n    const editTask = (index: number, text: string): void => {\n        tasks[index].label = text\n\n        saveTasks(tasks)\n    }\n\n    const deleteTask = (index: number): void => {\n        tasks.splice(index, 1)\n\n        saveTasks(tasks)\n    }\n\n    const deleteCompleteTask = (): void => {\n        const filterdTasks = tasks.filter((task) => !task.isChecked)\n\n        saveTasks(filterdTasks)\n    }\n\n    const toggleChecked = (index: number, checked: boolean): void => {\n        tasks[index].isChecked = checked\n\n        saveTasks(tasks)\n    }\n\n    return (\n        <div className=\"App\">\n            <InputForm onFormSubmit={crateTask} />\n            <TaskList\n                list={tasks}\n                toggleChecked={toggleChecked}\n                onSubmitEdit={editTask}\n                clickDelete={deleteTask}\n                deleteCompleteTask={deleteCompleteTask}\n            />\n        </div>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'App'\nimport reportWebVitals from './reportWebVitals'\nimport './index.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"styles_wrap__l5kXX\",\"form\":\"styles_form__18X5T\",\"input\":\"styles_input__2p_T6\",\"button\":\"styles_button__2xcgH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"styles_list__3dyeM\",\"nodata\":\"styles_nodata__qzstC\",\"deleteArea\":\"styles_deleteArea__30PPC\"};"],"sourceRoot":""}